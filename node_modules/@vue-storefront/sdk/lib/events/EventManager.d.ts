import type { EventCallback, Subscribers } from "../types";
/**
 * EventManagerInterface is an interface used to emit and subscribe to events.
 */
export interface EventManagerInterface {
    /**
     * Function that emits an event.
     * It calls all the callbacks that are registered for the given topic.
     *
     * @param topic - topic of the event
     * @param data - data that is passed to the callbacks
     */
    emit<EVENT_DATA>(topic: string, data: EVENT_DATA): void;
    /**
     * Function that registers a callback for a given topic.
     * It can be used to register a single callback or an array of callbacks.
     *
     * @param topic - topic of the event
     * @param callback - callback that is called when the event is emitted
     */
    register(topic: string, callback: EventCallback): void;
    /**
     * Function that registers a callback for a given topic.
     * It can be used to register a single callback or an array of callbacks.
     *
     * @param topic - topic of the event
     * @param callback - array of callbacks that are called when the event is emitted
     */
    register(topic: string, callback: Array<EventCallback>): void;
    /**
     * Function that unregisters a callback for a given topic.
     *
     * @param topic - topic of the event
     * @param callback - callback that is called when the event is emitted
     */
    unregister(topic: string, callback: EventCallback): void;
    /**
     * Function that registers multiple callbacks for multiple topics (Subscribers).
     * @param subscribers
     */
    registerSubscribers(subscribers: Subscribers): void;
}
/**
 * EventManager is a class that is used to emit and subscribe to events.
 *
 * @example
 * You can use it to emit an event:
 * ```typescript
 * const eventManager = new EventManager();
 * eventManager.emit('my_event_name', { foo: 'bar' });
 * ```
 *
 * You can use it to register a callback for an event:
 * ```typescript
 * const eventManager = new EventManager();
 * eventManager.register('my_event_name', (data) => {
 *   console.log(data);
 *   // { foo: 'bar' }
 *   // ...
 * });
 */
export declare class EventManager implements EventManagerInterface {
    /**
     * Object that contains all the registered callbacks for each topic.
     *
     * @readonly
     * @private
     */
    readonly events: Record<string, Array<EventCallback>>;
    constructor();
    emit<EVENT_DATA>(topic: string, data: EVENT_DATA): void;
    register(topic: string, callback: EventCallback | Array<EventCallback>): void;
    unregister(topic: string, callback: EventCallback): void;
    registerSubscribers(subscribers: Subscribers): void;
}
export declare const eventManager: EventManager;
//# sourceMappingURL=EventManager.d.ts.map