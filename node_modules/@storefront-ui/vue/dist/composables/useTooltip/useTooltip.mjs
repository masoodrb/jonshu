import { ref as $, computed as e, unref as u } from "vue";
import { offset as D, shift as M, flip as O, arrow as z } from "@floating-ui/vue";
import { useDisclosure as T } from "../useDisclosure/useDisclosure.mjs";
import { usePopover as X } from "../usePopover/usePopover.mjs";
function A(w) {
  const {
    placement: g = "top",
    strategy: y,
    middleware: d,
    arrowSize: o = "6px",
    ...v
  } = w || {}, t = $(), { isOpen: r, open: n, close: l, toggle: b } = T(), {
    style: a,
    middlewareData: s,
    placement: h,
    referenceRef: i,
    floatingRef: p
  } = X({
    isOpen: r,
    placement: g,
    strategy: y,
    middleware: e(() => [...u(d) || [D(8), M(), O()], z({ element: t })]),
    ...v
  });
  function f() {
    if (s.value.arrow) {
      const { x: c, y: m } = s.value.arrow, S = u(h).split("-")[0];
      return {
        position: "absolute",
        width: o,
        height: o,
        top: typeof m == "number" ? `${m}px` : "",
        left: typeof c == "number" ? `${c}px` : "",
        [{
          top: "bottom",
          right: "left",
          bottom: "top",
          left: "right"
        }[S]]: `calc(${o} / -2)`
      };
    }
    return {};
  }
  const P = e(() => ({
    ref: i,
    onMouseenter: n,
    onMouseleave: l
  })), x = e(() => ({
    ref: p,
    style: a.value
  })), R = e(() => ({
    ref: t,
    style: f()
  }));
  return {
    referenceRef: i,
    floatingRef: p,
    arrowRef: t,
    style: e(() => ({
      floating: a.value,
      arrow: f()
    })),
    isOpen: r,
    open: n,
    close: l,
    toggle: b,
    triggerProps: P,
    tooltipProps: x,
    arrowProps: R
  };
}
export {
  A as useTooltip
};
