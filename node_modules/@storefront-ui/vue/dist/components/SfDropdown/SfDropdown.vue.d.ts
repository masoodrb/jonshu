import { PropType } from 'vue';

declare const _default: __VLS_WithTemplateSlots<import('vue').DefineComponent<{
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    placement: {
        type: PropType<"top-start" | "top" | "top-end" | "bottom-start" | "bottom" | "bottom-end" | "left-start" | "left" | "left-end" | "right-start" | "right" | "right-end" | undefined>;
        default: undefined;
    };
    middleware: {
        type: PropType<{
            name: string;
            options?: any;
            fn: (state: {
                placement: import('@floating-ui/utils').Placement;
                strategy: import('@floating-ui/utils').Strategy;
                x: number;
                y: number;
                middlewareData: import('@floating-ui/core').MiddlewareData;
                initialPlacement: import('@floating-ui/utils').Placement;
                rects: import('@floating-ui/utils').ElementRects;
                platform: import('@floating-ui/core').Platform;
                elements: import('@floating-ui/dom').Elements;
            }) => import('@floating-ui/core').MiddlewareReturn | Promise<import('@floating-ui/core').MiddlewareReturn>;
        }[] | undefined>;
        default: undefined;
    };
    strategy: {
        type: PropType<"fixed" | "absolute" | undefined>;
        default: undefined;
    };
}, {}, unknown, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    "update:modelValue": (value: boolean) => void;
}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    placement: {
        type: PropType<"top-start" | "top" | "top-end" | "bottom-start" | "bottom" | "bottom-end" | "left-start" | "left" | "left-end" | "right-start" | "right" | "right-end" | undefined>;
        default: undefined;
    };
    middleware: {
        type: PropType<{
            name: string;
            options?: any;
            fn: (state: {
                placement: import('@floating-ui/utils').Placement;
                strategy: import('@floating-ui/utils').Strategy;
                x: number;
                y: number;
                middlewareData: import('@floating-ui/core').MiddlewareData;
                initialPlacement: import('@floating-ui/utils').Placement;
                rects: import('@floating-ui/utils').ElementRects;
                platform: import('@floating-ui/core').Platform;
                elements: import('@floating-ui/dom').Elements;
            }) => import('@floating-ui/core').MiddlewareReturn | Promise<import('@floating-ui/core').MiddlewareReturn>;
        }[] | undefined>;
        default: undefined;
    };
    strategy: {
        type: PropType<"fixed" | "absolute" | undefined>;
        default: undefined;
    };
}>> & {
    "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
}, {
    middleware: {
        name: string;
        options?: any;
        fn: (state: {
            placement: import('@floating-ui/utils').Placement;
            strategy: import('@floating-ui/utils').Strategy;
            x: number;
            y: number;
            middlewareData: import('@floating-ui/core').MiddlewareData;
            initialPlacement: import('@floating-ui/utils').Placement;
            rects: import('@floating-ui/utils').ElementRects;
            platform: import('@floating-ui/core').Platform;
            elements: import('@floating-ui/dom').Elements;
        }) => import('@floating-ui/core').MiddlewareReturn | Promise<import('@floating-ui/core').MiddlewareReturn>;
    }[] | undefined;
    placement: "top-start" | "top" | "top-end" | "bottom-start" | "bottom" | "bottom-end" | "left-start" | "left" | "left-end" | "right-start" | "right" | "right-end" | undefined;
    strategy: "fixed" | "absolute" | undefined;
    modelValue: boolean;
}, {}>, {
    trigger?(_: {}): any;
    default?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
//# sourceMappingURL=SfDropdown.vue.d.ts.map