import { defineComponent as g, toRefs as w, openBlock as r, createElementBlock as d, renderSlot as a, unref as t, normalizeStyle as _, createCommentVNode as v } from "vue";
import { useDropdown as S } from "../../composables/useDropdown/useDropdown.mjs";
const k = ["aria-hidden"], B = /* @__PURE__ */ g({
  __name: "SfDropdown",
  props: {
    modelValue: {
      type: Boolean,
      default: !1
    },
    placement: {
      type: String,
      default: void 0
    },
    middleware: {
      type: Array,
      default: void 0
    },
    strategy: {
      type: String,
      default: void 0
    }
  },
  emits: ["update:modelValue"],
  setup(n, { emit: l }) {
    const s = n, i = l, { modelValue: e, placement: f, middleware: p, strategy: m } = w(s), {
      referenceRef: c,
      floatingRef: u,
      style: y
    } = S({
      isOpen: e,
      placement: f,
      middleware: p,
      strategy: m,
      onClose: () => i("update:modelValue", !1)
    });
    return (o, R) => (r(), d("div", {
      ref_key: "referenceRef",
      ref: c,
      class: "w-max",
      "data-testid": "dropdown"
    }, [
      a(o.$slots, "trigger"),
      t(e) ? (r(), d("div", {
        key: 0,
        ref_key: "floatingRef",
        ref: u,
        style: _(t(y)),
        "aria-hidden": !t(e) || void 0,
        "data-testid": "dropdown-content"
      }, [
        a(o.$slots, "default")
      ], 12, k)) : v("", !0)
    ], 512));
  }
});
export {
  B as default
};
