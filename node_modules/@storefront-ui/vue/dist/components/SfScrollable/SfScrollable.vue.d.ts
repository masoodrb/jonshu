import { PropType, ConcreteComponent } from 'vue';
import { SfScrollableDirection, SfScrollableButtonsPlacement, SfScrollableOnDragStartData, SfScrollableOnScrollData, SfScrollableOnPrevData, SfScrollableOnDragEndData } from '../../index.ts';

declare const _default: __VLS_WithTemplateSlots<import('vue').DefineComponent<{
    tag: {
        type: PropType<string | ConcreteComponent>;
        default: string;
    };
    direction: {
        type: PropType<"vertical" | "horizontal">;
        default: SfScrollableDirection;
    };
    buttonsPlacement: {
        type: PropType<"none" | "block" | "floating">;
        default: SfScrollableButtonsPlacement;
    };
    wrapperClass: {
        type: (ArrayConstructor | StringConstructor | ObjectConstructor)[];
        default: string;
    };
    activeIndex: {
        type: NumberConstructor;
        default: undefined;
    };
    reduceMotion: {
        type: BooleanConstructor;
        default: undefined;
    };
    drag: {
        type: PropType<boolean | {
            sensitivity?: number | undefined;
            containerWidth?: boolean | undefined;
        } | undefined>;
        default: undefined;
    };
    prevDisabled: {
        type: BooleanConstructor;
        default: undefined;
    };
    nextDisabled: {
        type: BooleanConstructor;
        default: undefined;
    };
    isActiveIndexCentered: {
        type: BooleanConstructor;
        default: boolean;
    };
    buttonPrevAriaLabel: {
        type: StringConstructor;
        default: string;
    };
    buttonNextAriaLabel: {
        type: StringConstructor;
        default: string;
    };
}, {}, unknown, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    onDragStart: (data: SfScrollableOnDragStartData) => void;
    onDragEnd: (data: SfScrollableOnDragEndData) => void;
    onScroll: (data: SfScrollableOnScrollData) => void;
    onPrev: (data: SfScrollableOnPrevData) => void;
    onNext: (data: SfScrollableOnPrevData) => void;
}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
    tag: {
        type: PropType<string | ConcreteComponent>;
        default: string;
    };
    direction: {
        type: PropType<"vertical" | "horizontal">;
        default: SfScrollableDirection;
    };
    buttonsPlacement: {
        type: PropType<"none" | "block" | "floating">;
        default: SfScrollableButtonsPlacement;
    };
    wrapperClass: {
        type: (ArrayConstructor | StringConstructor | ObjectConstructor)[];
        default: string;
    };
    activeIndex: {
        type: NumberConstructor;
        default: undefined;
    };
    reduceMotion: {
        type: BooleanConstructor;
        default: undefined;
    };
    drag: {
        type: PropType<boolean | {
            sensitivity?: number | undefined;
            containerWidth?: boolean | undefined;
        } | undefined>;
        default: undefined;
    };
    prevDisabled: {
        type: BooleanConstructor;
        default: undefined;
    };
    nextDisabled: {
        type: BooleanConstructor;
        default: undefined;
    };
    isActiveIndexCentered: {
        type: BooleanConstructor;
        default: boolean;
    };
    buttonPrevAriaLabel: {
        type: StringConstructor;
        default: string;
    };
    buttonNextAriaLabel: {
        type: StringConstructor;
        default: string;
    };
}>> & {
    onOnScroll?: ((data: SfScrollableOnScrollData) => any) | undefined;
    onOnDragStart?: ((data: SfScrollableOnDragStartData) => any) | undefined;
    onOnDragEnd?: ((data: SfScrollableOnDragEndData) => any) | undefined;
    onOnPrev?: ((data: SfScrollableOnPrevData) => any) | undefined;
    onOnNext?: ((data: SfScrollableOnPrevData) => any) | undefined;
}, {
    reduceMotion: boolean;
    drag: boolean | {
        sensitivity?: number | undefined;
        containerWidth?: boolean | undefined;
    } | undefined;
    direction: "vertical" | "horizontal";
    isActiveIndexCentered: boolean;
    activeIndex: number;
    tag: string | ConcreteComponent;
    wrapperClass: string | Record<string, any> | unknown[];
    buttonsPlacement: "none" | "block" | "floating";
    prevDisabled: boolean;
    nextDisabled: boolean;
    buttonPrevAriaLabel: string;
    buttonNextAriaLabel: string;
}, {}>, {
    previousButton?(_: {
        onClick: () => void;
        disabled: boolean;
    }): any;
    default?(_: {}): any;
    nextButton?(_: {
        onClick: () => void;
        disabled: boolean;
    }): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
//# sourceMappingURL=SfScrollable.vue.d.ts.map