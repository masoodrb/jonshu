import { defineComponent as c, toRefs as m, computed as b, withDirectives as p, openBlock as s, createElementBlock as u, normalizeClass as x, vModelCheckbox as v } from "vue";
const y = /* @__PURE__ */ c({
  __name: "SfCheckbox",
  props: {
    modelValue: {
      type: [String, Array, Boolean],
      default: !1
    },
    invalid: {
      type: Boolean,
      default: !1
    }
  },
  emits: ["update:modelValue"],
  setup(t, { emit: o }) {
    const i = t, d = o, { modelValue: e } = m(i), r = b({
      get: () => e == null ? void 0 : e.value,
      set: (a) => d("update:modelValue", a)
    });
    return (a, n) => p((s(), u("input", {
      "onUpdate:modelValue": n[0] || (n[0] = (l) => r.value = l),
      class: x(["h-[18px] min-w-[18px] border-2 rounded-sm appearance-none cursor-pointer text-gray-500 hover:indeterminate:text-primary-800 enabled:active:checked:text-primary-900 checked:text-primary-700 checked:bg-checked-checkbox-current border-current indeterminate:bg-indeterminate-checkbox-current indeterminate:text-primary-700 disabled:text-gray-300 hover:text-gray-300 disabled:cursor-not-allowed enabled:hover:border-primary-800 enabled:active:border-primary-900 enabled:hover:checked:text-primary-800 enabled:hover:indeterminate:text-primary-800 enabled:checked:text-primary-700 enabled:indeterminate:text-primary-700 enabled:focus-visible:outline enabled:focus-visible:outline-offset", {
        "border-negative-700 enabled:hover:border-negative-800 enabled:active:border-negative-900 indeterminate:bg-none": t.invalid
      }]),
      type: "checkbox",
      "data-testid": "checkbox"
    }, null, 2)), [
      [v, r.value]
    ]);
  }
});
export {
  y as default
};
