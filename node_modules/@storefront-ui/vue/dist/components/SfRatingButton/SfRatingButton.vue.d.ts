import { PropType } from 'vue';
import { SfRatingButtonSize, SfRatingButtonIconSize } from '../../index.ts';

declare const _default: __VLS_WithTemplateSlots<import('vue').DefineComponent<{
    modelValue: {
        type: NumberConstructor;
        default: number;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: PropType<"base" | "sm" | "lg">;
        default: SfRatingButtonSize;
    };
    getLabelText: {
        type: PropType<(value: number) => string>;
        default: (value: number) => string;
    };
}, {}, unknown, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    "update:modelValue": (val: number) => void;
}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
    modelValue: {
        type: NumberConstructor;
        default: number;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: PropType<"base" | "sm" | "lg">;
        default: SfRatingButtonSize;
    };
    getLabelText: {
        type: PropType<(value: number) => string>;
        default: (value: number) => string;
    };
}>> & {
    "onUpdate:modelValue"?: ((val: number) => any) | undefined;
}, {
    name: string;
    max: number;
    size: "base" | "sm" | "lg";
    disabled: boolean;
    modelValue: number;
    getLabelText: (value: number) => string;
}, {}>, {
    default?(_: {
        isFilled: boolean;
        iconSize: SfRatingButtonIconSize;
        max: number;
    }): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
//# sourceMappingURL=SfRatingButton.vue.d.ts.map