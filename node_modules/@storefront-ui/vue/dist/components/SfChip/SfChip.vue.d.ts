import { PropType, InputHTMLAttributes } from 'vue';
import { SfChipSize } from '../../index.ts';

declare const _default: __VLS_WithTemplateSlots<import('vue').DefineComponent<{
    size: {
        type: PropType<"base" | "sm">;
        default: SfChipSize;
    };
    modelValue: {
        type: PropType<any[] | Set<any> | (boolean | "true" | "false") | undefined>;
        default: boolean;
    };
    inputProps: {
        type: PropType<InputHTMLAttributes>;
        default: null;
    };
    square: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {}, unknown, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    "update:modelValue": (param: any[] | Set<any> | (boolean | "true" | "false") | undefined) => void;
}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
    size: {
        type: PropType<"base" | "sm">;
        default: SfChipSize;
    };
    modelValue: {
        type: PropType<any[] | Set<any> | (boolean | "true" | "false") | undefined>;
        default: boolean;
    };
    inputProps: {
        type: PropType<InputHTMLAttributes>;
        default: null;
    };
    square: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    "onUpdate:modelValue"?: ((param: any[] | Set<any> | (boolean | "true" | "false") | undefined) => any) | undefined;
}, {
    size: "base" | "sm";
    square: boolean;
    modelValue: any[] | Set<any> | (boolean | "true" | "false") | undefined;
    inputProps: InputHTMLAttributes;
}, {}>, {
    prefix?(_: {}): any;
    default?(_: {}): any;
    suffix?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
//# sourceMappingURL=SfChip.vue.d.ts.map