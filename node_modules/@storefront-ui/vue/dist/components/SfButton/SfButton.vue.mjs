import { defineComponent as f, toRefs as v, computed as o, openBlock as c, createBlock as g, resolveDynamicComponent as h, normalizeClass as x, withCtx as w, renderSlot as d, createCommentVNode as n } from "vue";
import { useAttrsRef as C } from "../../shared/reactiveContext.mjs";
import { SfButtonSize as l, SfButtonVariant as t } from "@storefront-ui/shared";
const S = {
  [t.primary]: "text-white shadow hover:shadow-md active:shadow bg-primary-700 hover:bg-primary-800 active:bg-primary-900 disabled:bg-disabled-300",
  [t.secondary]: "text-primary-700 hover:bg-primary-100 hover:text-primary-800 active:bg-primary-200 active:text-primary-900 ring-1 ring-inset ring-primary-700 shadow hover:shadow-md active:shadow hover:ring-primary-800 active:ring-primary-900 disabled:ring-1 disabled:ring-disabled-300 disabled:bg-white/50",
  [t.tertiary]: "text-primary-700 hover:bg-primary-100 hover:text-primary-800 active:bg-primary-200 active:text-primary-900 disabled:bg-transparent"
}, j = /* @__PURE__ */ f({
  __name: "SfButton",
  props: {
    size: {
      type: String,
      default: l.base
    },
    variant: {
      type: String,
      default: t.primary
    },
    disabled: {
      type: Boolean,
      default: !1
    },
    square: {
      type: Boolean,
      default: !1
    },
    tag: {
      type: [String, Object],
      default: void 0
    }
  },
  setup(a) {
    const p = a, { size: u, tag: r, square: i } = v(p), m = o(() => {
      switch (u.value) {
        case l.sm:
          return [i.value ? "p-1.5" : "leading-5 text-sm py-1.5 px-3", "gap-1.5"];
        case l.lg:
          return [i.value ? "p-4" : "py-3 leading-6 px-6", "gap-3"];
        default:
          return [i.value ? "p-2" : "py-2 leading-6 px-4", "gap-2"];
      }
    }), s = o(() => (r == null ? void 0 : r.value) || "button"), b = C(), y = o(
      () => b.value.type ?? (typeof s.value == "string" && s.value.toLowerCase() === "button" ? "button" : void 0)
    );
    return (e, B) => (c(), g(h(s.value), {
      type: y.value,
      disabled: a.disabled,
      class: x([
        "inline-flex items-center justify-center font-medium text-base focus-visible:outline focus-visible:outline-offset rounded-md disabled:text-disabled-500 disabled:bg-disabled-300 disabled:shadow-none disabled:ring-0 disabled:cursor-not-allowed",
        m.value,
        S[a.variant]
      ]),
      "data-testid": "button"
    }, {
      default: w(() => [
        e.$slots.prefix ? d(e.$slots, "prefix", { key: 0 }) : n("", !0),
        d(e.$slots, "default"),
        e.$slots.suffix ? d(e.$slots, "suffix", { key: 1 }) : n("", !0)
      ]),
      _: 3
    }, 8, ["type", "disabled", "class"]));
  }
});
export {
  j as default,
  S as variantClasses
};
