import { PropType, ConcreteComponent } from 'vue';
import { SfInputSize } from '../../index.ts';

declare const _default: __VLS_WithTemplateSlots<import('vue').DefineComponent<{
    modelValue: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    wrapperTag: {
        type: PropType<string | ConcreteComponent>;
        default: string;
    };
    size: {
        type: PropType<"base" | "sm" | "lg">;
        default: SfInputSize;
    };
    invalid: {
        type: BooleanConstructor;
        default: boolean;
    };
    wrapperClass: {
        type: (StringConstructor | ObjectConstructor)[];
        default: string;
    };
}, {}, unknown, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    "update:modelValue": (value: string | number) => void;
}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
    modelValue: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    wrapperTag: {
        type: PropType<string | ConcreteComponent>;
        default: string;
    };
    size: {
        type: PropType<"base" | "sm" | "lg">;
        default: SfInputSize;
    };
    invalid: {
        type: BooleanConstructor;
        default: boolean;
    };
    wrapperClass: {
        type: (StringConstructor | ObjectConstructor)[];
        default: string;
    };
}>> & {
    "onUpdate:modelValue"?: ((value: string | number) => any) | undefined;
}, {
    invalid: boolean;
    size: "base" | "sm" | "lg";
    modelValue: string | number;
    wrapperTag: string | ConcreteComponent;
    wrapperClass: string | Record<string, any>;
}, {}>, {
    prefix?(_: {}): any;
    suffix?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
//# sourceMappingURL=SfInput.vue.d.ts.map