import { defineComponent as g, toRefs as w, ref as v, computed as b, openBlock as y, createBlock as h, resolveDynamicComponent as x, normalizeClass as S, unref as i, withCtx as V, renderSlot as o, withDirectives as C, createElementVNode as z, mergeProps as B, vModelDynamic as D } from "vue";
import { useFocusVisible as I } from "../../composables/useFocusVisible/useFocusVisible.mjs";
import { SfInputSize as a } from "@storefront-ui/shared";
const T = {
  inheritAttrs: !1
}, $ = {
  [a.sm]: " h-[32px]",
  [a.base]: "h-[40px]",
  [a.lg]: "h-[48px]"
}, N = /* @__PURE__ */ g({
  ...T,
  __name: "SfInput",
  props: {
    modelValue: {
      type: [String, Number],
      default: ""
    },
    wrapperTag: {
      type: [String, Object],
      default: "span"
    },
    size: {
      type: String,
      default: a.base
    },
    invalid: {
      type: Boolean,
      default: !1
    },
    wrapperClass: {
      type: [String, Object],
      default: ""
    }
  },
  emits: ["update:modelValue"],
  setup(t, { emit: u }) {
    const p = t, d = u, { modelValue: c, invalid: n } = w(p), { isFocusVisible: m } = I({ isTextInput: !0 }), r = v(), s = b({
      get: () => c.value ?? r.value,
      set: (e) => {
        d("update:modelValue", e), r.value = e;
      }
    });
    return (e, l) => (y(), h(x(t.wrapperTag), {
      class: S([
        "flex items-center gap-2 px-4 bg-white rounded-md ring-1 text-neutral-500 hover:ring-primary-700 focus-within:caret-primary-700 active:caret-primary-700 active:ring-primary-700 active:ring-2 focus-within:ring-primary-700 focus-within:ring-2",
        {
          "ring-2 ring-negative-700": i(n),
          "ring-1 ring-neutral-200": !i(n),
          "focus-within:outline focus-within:outline-offset": i(m)
        },
        $[t.size],
        t.wrapperClass
      ]),
      "data-testid": "input"
    }, {
      default: V(() => [
        o(e.$slots, "prefix"),
        C(z("input", B({
          "onUpdate:modelValue": l[0] || (l[0] = (f) => s.value = f),
          class: "min-w-[80px] w-full text-base outline-none appearance-none text-neutral-900 disabled:cursor-not-allowed disabled:bg-transparent read-only:bg-transparent",
          size: 1,
          "data-testid": "input-field"
        }, e.$attrs), null, 16), [
          [D, s.value]
        ]),
        o(e.$slots, "suffix")
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
export {
  N as default
};
