import { defineComponent as m, toRefs as c, computed as d, withDirectives as f, openBlock as g, createElementBlock as x, normalizeClass as v, unref as y, vModelText as b } from "vue";
import { SfTextareaSize as t } from "@storefront-ui/shared";
import { useFocusVisible as S } from "../../composables/useFocusVisible/useFocusVisible.mjs";
const V = {
  [t.sm]: " h-[56px] py-[6px] pl-4 pr-3",
  [t.base]: "h-[64px] py-2 pl-4 pr-3",
  [t.lg]: "h-[72px], p-3 pl-4"
}, B = /* @__PURE__ */ m({
  __name: "SfTextarea",
  props: {
    modelValue: {
      type: [String, Number],
      default: ""
    },
    size: {
      type: String,
      default: t.base
    },
    invalid: {
      type: Boolean,
      default: !1
    }
  },
  emits: ["update:modelValue"],
  setup(e, { emit: o }) {
    const s = e, l = o, { modelValue: i } = c(s), { isFocusVisible: u } = S({ isTextInput: !0 }), a = d({
      get: () => i == null ? void 0 : i.value,
      set: (r) => l("update:modelValue", r)
    });
    return (r, n) => f((g(), x("textarea", {
      "onUpdate:modelValue": n[0] || (n[0] = (p) => a.value = p),
      class: v([
        "px-4 bg-white rounded-md text-neutral-900 ring-inset hover:ring-primary-800 focus:caret-primary-700 active:caret-primary-700 active:ring-primary-700 active:ring-2 focus:ring-primary-700 focus:ring-2 outline-none",
        {
          "ring-2 ring-negative-700": e.invalid,
          "ring-1 ring-neutral-200": !e.invalid,
          "focus:outline focus:outline-offset": y(u)
        },
        V[e.size]
      ]),
      "data-testid": "textarea"
    }, null, 2)), [
      [b, a.value]
    ]);
  }
});
export {
  B as default
};
