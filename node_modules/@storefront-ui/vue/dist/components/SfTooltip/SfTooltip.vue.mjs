import { defineComponent as y, toRefs as g, openBlock as o, createElementBlock as r, mergeProps as a, unref as t, renderSlot as w, createTextVNode as x, toDisplayString as b, createCommentVNode as l } from "vue";
import { useTooltip as k } from "../../composables/useTooltip/useTooltip.mjs";
const P = /* @__PURE__ */ y({
  __name: "SfTooltip",
  props: {
    placement: {
      type: String,
      default: void 0
    },
    middleware: {
      type: Array,
      default: void 0
    },
    strategy: {
      type: String,
      default: void 0
    },
    showArrow: {
      type: Boolean,
      default: !1
    },
    label: {
      type: String,
      required: !0
    }
  },
  setup(e) {
    const s = e, { placement: n, middleware: p, strategy: d } = g(s), { isOpen: i, triggerProps: c, tooltipProps: m, arrowProps: u } = k({ placement: n, middleware: p, strategy: d });
    return (f, S) => (o(), r("span", a({ "data-testid": "tooltip" }, t(c)), [
      w(f.$slots, "default"),
      e.label && t(i) ? (o(), r("div", a({
        key: 0,
        role: "tooltip",
        class: "bg-black px-2 py-1.5 rounded-md text-white text-xs w-max max-w-[360px] drop-shadow"
      }, t(m)), [
        x(b(e.label) + " ", 1),
        e.showArrow ? (o(), r("span", a({ key: 0 }, t(u), { class: "bg-black rotate-45" }), null, 16)) : l("", !0)
      ], 16)) : l("", !0)
    ], 16));
  }
});
export {
  P as default
};
